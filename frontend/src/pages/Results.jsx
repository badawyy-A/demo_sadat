// src/pages/Results.jsx
import React, { useContext, useEffect, useState } from 'react';
import { useNavigate } from 'react-router-dom';
import { motion } from 'framer-motion';
import { jsPDF } from 'jspdf';
import { AssessmentContext } from '../context/AssessmentContext';
import { recommendSports } from '../utils/sportRecommender';
import ResultsTable from '../components/results/ResultsTable';
import SportRecommendation from '../components/results/SportRecommendation';
import { Chart as ChartJS, RadialLinearScale, PointElement, LineElement, Filler, Tooltip, Legend } from 'chart.js';
import { Radar } from 'react-chartjs-2';

// Register Chart.js components
ChartJS.register(
  RadialLinearScale,
  PointElement,
  LineElement,
  Filler,
  Tooltip,
  Legend
);

const Results = () => {
  const { userData, testResults, updateSportRecommendations, sportRecommendations, resetAssessment } = useContext(AssessmentContext);
  const [chartData, setChartData] = useState(null);
  const navigate = useNavigate();

  useEffect(() => {
    // Redirect if no test results
    if (Object.keys(testResults).filter(key => testResults[key] !== null).length === 0) {
      navigate('/video-upload');
      return;
    }

    // Get sport recommendations if not already set
    if (sportRecommendations.length === 0) {
      const recommendations = recommendSports(testResults, userData);
      updateSportRecommendations(recommendations);
    }

    // Prepare radar chart data
    const labels = Object.keys(testResults)
      .filter(key => testResults[key] !== null)
      .map(key => {
        const testNames = {
          coordination: 'Coordination',
          balance: 'Balance',
          muscularStrength: 'Strength',
          cardiovascular: 'Endurance',
          speed: 'Speed'
        };
        return testNames[key] || key;
      });

    const data = Object.keys(testResults)
      .filter(key => testResults[key] !== null)
      .map(key => testResults[key]);

      setChartData({
        labels,
        datasets: [
          {
            label: `${userData.name}'s Fitness Profile`,
            data,
            backgroundColor: 'rgba(59, 130, 246, 0.2)', // Semi-transparent blue fill
            borderColor: 'rgba(59, 130, 246, 1)', // Solid blue border
            borderWidth: 2,
            pointBackgroundColor: 'rgba(59, 130, 246, 1)', // Blue points
            pointBorderColor: '#fff', // White point borders
            pointHoverBackgroundColor: '#fff', // White on hover
            pointHoverBorderColor: 'rgba(59, 130, 246, 1)', // Blue border on hover
            pointRadius: 4, // Larger points for visibility
            pointHoverRadius: 6 // Slightly larger on hover
          },
        ],
      });
    }, [testResults, userData, sportRecommendations, updateSportRecommendations, navigate]);

  const generatePDF = () => {
    const doc = new jsPDF();
    
    // Add title
    doc.setFontSize(20);
    doc.setTextColor(0, 102, 204);
    doc.text('Fitness Assessment Report', 105, 20, { align: 'center' });
    
    // Add candidate details
    doc.setFontSize(12);
    doc.setTextColor(0, 0, 0);
    doc.text(`Name: ${userData.name}`, 20, 40);
    doc.text(`Age: ${userData.age} years`, 20, 50);
    doc.text(`Gender: ${userData.gender.charAt(0).toUpperCase() + userData.gender.slice(1)}`, 20, 60);
    doc.text(`BMI: ${userData.bmi} (${userData.bmiCategory})`, 20, 70);
    
    // Add fitness results
    doc.setFontSize(16);
    doc.setTextColor(0, 102, 204);
    doc.text('Fitness Test Results', 20, 90);
    
    doc.setFontSize(10);
    doc.setTextColor(0, 0, 0);
    let yPos = 100;
    
    Object.keys(testResults)
      .filter(key => testResults[key] !== null)
      .forEach((test, index) => {
        const testNames = {
          coordination: 'Coordination',
          balance: 'Balance',
          muscularStrength: 'Muscular Strength',
          cardiovascular: 'Cardiovascular Endurance',
          speed: 'Speed'
        };
        
        doc.text(`${testNames[test] || test}: ${testResults[test]} / 100`, 20, yPos + (index * 10));
      });
    
    // Add sport recommendations
    doc.setFontSize(16);
    doc.setTextColor(0, 102, 204);
    doc.text('Recommended Sports', 20, 160);
    
    doc.setFontSize(10);
    doc.setTextColor(0, 0, 0);
    sportRecommendations.forEach((sport, index) => {
      doc.text(`${index + 1}. ${sport.name} - Compatibility: ${Math.round(sport.compatibilityScore * 100)}%`, 20, 170 + (index * 10));
    });
    
    // Add footer
    doc.setFontSize(8);
    doc.setTextColor(128, 128, 128);
    doc.text('Generated by Fitness Assessment App', 105, 280, { align: 'center' });
    doc.text(`Date: ${new Date().toLocaleDateString()}`, 105, 285, { align: 'center' });
    
    // Save PDF
    doc.save(`fitness_report_${userData.name.replace(/\s+/g, '_')}.pdf`);
  };

  // Function to reset assessment data and navigate to home page
  const handleStartNewAssessment = () => {
    resetAssessment(); // Clear all assessment data in context
    navigate('/'); // Navigate back to home page
  };

  if (!chartData) {
    return <div className="text-center py-12">Loading results...</div>;
  }

  return (
    <motion.div
      initial={{ opacity: 0 }}
      animate={{ opacity: 1 }}
      transition={{ duration: 0.5 }}
      className="max-w-4xl mx-auto"
    >
      <div className="flex justify-between items-center mb-6">
        <h1 className="text-3xl font-bold">Assessment Results</h1>
        <button 
          onClick={generatePDF}
          className="btn-primary flex items-center"
        >
          <svg xmlns="http://www.w3.org/2000/svg" className="h-5 w-5 mr-2" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 16v1a3 3 0 003 3h10a3 3 0 003-3v-1m-4-4l-4 4m0 0l-4-4m4 4V4" />
          </svg>
          Download PDF
        </button>
      </div>
      
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6 mb-8">
        <ResultsTable userData={userData} testResults={testResults} />
        
        <div className="card">
          <h2 className="text-2xl font-semibold mb-4">Fitness Profile</h2>
          <div className="h-64">
            <Radar 
              data={chartData} 
              options={{
                scales: {
                  r: {
                    min: 0,
                    max: 100,
                    ticks: {
                      stepSize: 20
                    }
                  }
                },
                elements: {
                  line: {
                    tension: 0.2
                  }
                },
                responsive: true,
                maintainAspectRatio: false
              }}
            />
          </div>
        </div>
      </div>
      
      <SportRecommendation recommendations={sportRecommendations} />
      
      <div className="mt-8 text-center">
        <button
          onClick={handleStartNewAssessment}
          className="btn-outline"
        >
          Start New Assessment
        </button>
      </div>
    </motion.div>
  );
};

export default Results;